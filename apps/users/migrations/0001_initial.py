# Generated by Django 4.0.6 on 2022-08-27 12:39

import autoslug.fields
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='e-posta')),
                ('phone_number', models.CharField(blank=True, max_length=12, validators=[django.core.validators.RegexValidator('^(0|90)(\\d{10})$')], verbose_name='telefon numarası')),
                ('whatsapp', models.CharField(blank=True, max_length=12, validators=[django.core.validators.RegexValidator('^(0|90)(\\d{10})$')], verbose_name='whatsapp numarası')),
                ('is_lawyer', models.BooleanField(default=False, verbose_name='avukatmıdır?')),
                ('consultacy_free', models.BooleanField(default=False, verbose_name='bedava danışmanlık')),
                ('consultacy_price', models.PositiveIntegerField(default=0, verbose_name='danışmanlık fiyatı')),
                ('license_date', models.DateTimeField(blank=True, null=True, verbose_name='lisans aldığı tarih')),
                ('rate', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='değerlendirme')),
                ('city', models.CharField(blank=True, max_length=15, null=True, verbose_name='İlçe')),
                ('website', models.URLField(blank=True, null=True, verbose_name='website adresi')),
                ('avatar', models.ImageField(default='users/avatars/default.jpg', upload_to='users/avatars', verbose_name='profil resmi')),
                ('bio', models.TextField(verbose_name='hakkında')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('name', models.CharField(max_length=50, verbose_name='alan adı')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='name', primary_key=True, serialize=False, unique=True, verbose_name='slug')),
            ],
            options={
                'verbose_name': 'alan',
                'verbose_name_plural': 'alanlar',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(validators=[django.core.validators.MinLengthValidator(20), django.core.validators.MaxLengthValidator(200)], verbose_name='içerik')),
                ('rate', models.IntegerField(choices=[(1, 'Bad'), (2, 'Fine'), (3, 'Good'), (5, 'Great')], validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='puan')),
                ('creation_date', models.DateTimeField(auto_now_add=True, verbose_name='tarih')),
                ('destination', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='destination_reviews', to=settings.AUTH_USER_MODEL, verbose_name='Destination')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owner_reviews', to=settings.AUTH_USER_MODEL, verbose_name='owner')),
            ],
            options={
                'verbose_name': 'eleştiri',
                'verbose_name_plural': 'eleştirilerr',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='areas',
            field=models.ManyToManyField(to='users.area', verbose_name='alanlar'),
        ),
        migrations.AddField(
            model_name='user',
            name='favorites',
            field=models.ManyToManyField(blank=True, limit_choices_to={'is_lawyer': True}, to=settings.AUTH_USER_MODEL, verbose_name='favoriler'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
